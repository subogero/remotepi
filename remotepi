#!/usr/bin/perl
use feature state;
use Mojolicious::Lite;
use IPC::Open2;
use WWW::U2B;

# STARTUP
sub status; sub thumbnail; sub decorate; sub logger;
sub ls;
sub rpifm_my; sub run_rpifm; sub byalphanum;
sub yt;
my ($root, $ytid, %ythits, $fm_my);
# Clean up albumart symlink upon exit
$SIG{TERM} = sub { thumbnail };

# Get ls root directory
if (open CFG, "/etc/omxd.conf") {
    $root = <CFG>;
    chomp $root;
    $root =~ s|user=|/home/|;
    $root = "/home" unless -d $root;
    close CFG;
} else {
    $root = "/home";
}

# Run in /var/tmp/remotepi
my $cwd = '/var/tmp/remotepi';
-d $cwd or mkdir $cwd;
chdir $cwd;

# ROUTES
get '/' => sub {
    my $c = shift;
    $c->reply->static('index.html');
};

any '/S*param' => { param => 'post' } => sub {
    my $c = shift;
    my $data = $c->req->json;
    $c->render(json => status($c->stash('param'), $data));
};

any '/home*param' => { param => '/' } => sub {
    my $c = shift;
    my $data = $c->req->json;
    $c->render(json => ls($c->stash('param'), $data));
};

any '/fm*param/' => { param => '/' } => sub {
    my $c = shift;
    my $data = $c->req->json;
    my ($response, $code) = fm($c->stash('param'), $data);
    if ($code) {
        $c->render(text => $response, status => $code);
    } else {
        $c->render(json => $response);
    }
    rpifm_my;
};

any '/yt*param' => { param => '/' } => sub {
    my $c = shift;
    my $data = $c->req->json;
    $c->render(json => yt($c->stash('param'), $data));
};

rpifm_my;
my $port = 31100;
app->start('daemon', '-l' => "http://*:$port");

# HELPERS

# Print playlist status
sub status {
    my $cmd = shift;
    my $data = shift;
    if ($data && $data->{cmd} =~ /^[NRr.pPfFnxXhjdDg]$/) {
        `omxd $data->{cmd} $data->{file}`;
    }
    unless (open PLAY, "omxd S all |") {
        return;
    }
    my $now = <PLAY>;
    chomp $now;
    my ($doing, $at, $of, $what) = split /[\s\/]/, $now, 4;
    # Remove root from track name if local file
    my ($dir) = $what =~ m|^(/.+)/[^/]+$|;
    $what =~ s/$root//;
    $what = decorate $cmd, $what;
    # Construct JSON response
    my $response = { doing => $doing, at => $at+0, of => $of+0, what => $what };
    my $i = 0;
    @{$response->{list}} = map {
        s/^(> )?$root(.+)\n/$2/;
        { name => $i++, label => $_, ops => [ qw(g x) ] }
    } <PLAY>;
    close PLAY;
    $response->{image} = thumbnail $dir;
    return $response;
}

# Decorate currect track with FM/YouTube info
sub decorate {
    my $cmd = shift;
    my $what = shift;
    # Replace track name with internet radio if needed
    foreach (keys %$fm_my) {
        next unless $fm_my->{$_}{listen} eq $what;
        my $url = $_;
        $what = $fm_my->{$_}{title};
        if ($cmd =~ m|^S\d*/details|) {
            my $st_page = `curl -L "internet-radio.com/search/?radio=$url" 2>/dev/null`;
            $st_page =~ m|<br>[\s\n]*<b>(.+?)</b>|s;
            $what .= "\n$url\n$1";
        }
    }
    # Replace track name with YouTube id if needed
    $what =~ s|.*\.u2bfifo$|/YouTube/$ythits{$ytid}|;

    return $what;
}

# Get thumbnail image link from current playback directory
sub thumbnail {
    my $dir = shift;
    state ($dir_old, $img_old);
    return $img_old if $dir && $dir_old && $dir eq $dir_old;
    unlink $img_old if $img_old;;
    $img_old = '';
    $dir_old = $dir;
    return unless $dir && opendir DIR, $dir;
    my $img;
    while (readdir DIR) {
        next unless /(png|jpe?g)$/i;
        next if $_ eq 'rpi.jpg';
        symlink "$dir/$_", "public/$_" or logger "Unable to symlink $_";
        $img_old = $_;
        $img = $_;
        last;
    }
    close DIR;
    return $img;
}

# Browse Raspberry Pi
sub ls {
    my $dir = shift;
    my $data = shift;
    if ($data) {
        `omxd $data->{cmd} "$root$data->{file}"` if $data->{cmd} =~ /[iaAIHJ]/;
        return [];
    }
    # Return to root dir upon dangerous attempts
    $dir = $dir =~ /^\.|^$/ ? $root : "$root$dir";
    # Sanitize dir: remove double slashes, cd .. until really dir
    $dir =~ s|(.+)/.+|$1| while ! -d $dir;
    opendir DIR, $dir;
    my @files;
    push @files, $_ while readdir DIR;
    closedir DIR;
    my $response = [];
    foreach (sort { -d "$dir/$a" && -f "$dir/$b" ? -1
                  : -f "$dir/$a" && -d "$dir/$b" ?  1
                  :          $a     cmp      $b     } @files) {
        next if /^\.$/;
        next if /^\.\w/;
        next if /^\.\.$/ && $dir eq "$root/";
        if ($_ eq '..') {
            push @$response, { name => $_, ops => [ qw(cd) ] };
        } elsif (-d "$dir/$_") {
            push @$response, { name => $_, ops => [ qw(cd i a A) ] };
        } else {
            push @$response, { name => $_, ops => [ qw(i a A I H J) ] };
        }
    }
    return $response;
}

# Browse internet radio stations
sub fm {
    # Convert both URL and JSON list into multiline strings
    (my $cmd = shift) =~ s|^/||;
    $cmd =~ s|/|\n|g;
    my $data = shift;
    if (ref $data eq 'ARRAY') {
        $data = join("\n", @$data);
    }
    if ($cmd =~ /\n[iaAIHJ]/) {
        return "400 No playlist changes in GET requests", 400;
    }
    my $cmds = $data || $cmd;

    my $response = [
        { name => '/g', ops => [ 'cd' ], label => 'Genres' },
        { name => '/m', ops => [ 'cd' ], label => 'My Stations' },
    ];
    my ($title, %list) = run_rpifm $cmds;
    push @$response, { name => $title || 'Genres', ops => [] } if %list;
    foreach (sort byalphanum keys %list) {
        unless ($title) {
            push @$response, {
                name => $_,
                ops => [ 'cd' ],
                label => $list{$_},
            };
        } elsif (/^[<>]$/) {
            push @$response, {
                name => $_,
                ops => [ 'cd' ],
                label => $_ eq '<' ? 'Previous' : 'Next',
            };
        } else {
            push @$response, {
                name => $_,
                ops => [ qw(i a A I H J) ],
                label => $list{$_},
            };
        }
    }
    return $response;
}

sub run_rpifm {
    my $cmd = shift;
    my $pid = open2(\*IN, \*OUT, '/usr/bin/rpi.fm') or die $!;
    print OUT $cmd;
    close OUT;
    my ($title, %list);
    while (<IN>) {
        s/\r|\n//g;
        if (/^[a-zA-Z]/) {
            $title = $_;
            %list = ();
        } elsif (/^ *(\d+|[<>]) +(.+)$/) {
            $list{$1} = $2;
        }
    }
    close IN;
    waitpid $pid, 0;
    return $title, %list;
}

sub rpifm_my {
    my $cfgfile = ".rpi.fm";
    return unless open RPI, $cfgfile;
    my $dump;
    while (<RPI>) {
        $dump .= $_ if /MyStations/ || $dump; # Lines from MysStations on
        last if $dump && /^  }/;              # until its closing brace
    }
    $dump =~ s/.+?\{/\$fm_my = {/;
    eval $dump;
}

sub byalphanum {
    return $a <=> $b if $a =~ /^\d+$/ && $b =~ /^\d+$/;
    return $a cmp $b;
}

# Browse and play YouTube
sub yt {
    (my $cmd = shift) =~ s|^/||;
    $cmd =~ m|^([^/]+)/(.*)|;
    my $query;
    ($cmd, $query) = ($1, $2);

    my $data = shift;

    # Playback command
    if ($data) {
        my @streams = WWW::U2B::extract_streams $data->{query};
        foreach (@streams) {
            next unless $_->{extension} eq 'mp4';
            WWW::U2B::playback "omxd $data->{cmd}", $_;
            logger "U2B: extension=".$_->{extension}.", quality=".$_->{quality};
            logger "omxd $data->{cmd} $_->{url}";
            last;
        }
        $ytid = $data->{query};
        return '';
    }
    # Search command
    my @response = WWW::U2B::search(split / /, $query);
    foreach (@response) {
        $_->{ops} = [ qw(I H J) ];
        $ythits{$_->{name}} = $_->{label};
    }
    return \@response;
}

sub logger {
    print "@_\n";
}
__DATA__
@@ not_found.html.ep
/bin/bash: s: command not found
